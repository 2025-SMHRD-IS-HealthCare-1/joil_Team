// server.js
const fs = require('fs');                       // 파일/인증서
const https = require('https');                 // HTTPS 서버
const express = require('express');             // express 본체
const path = require('path');                   // 경로
const cookieParser = require('cookie-parser');  // 쿠키
const session = require('express-session');     // 세션
const os = require('os');                       // LAN IP 조회
const { createProxyMiddleware } = require('http-proxy-middleware'); // 프록시

// 앱
const app = express();

// ===== 로컬 IPv4 (로그용) =====
function getLocalIPv4() {
  const interfaces = os.networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      if (iface.family === 'IPv4' && !iface.internal) return iface.address;
    }
  }
  return 'localhost';
}
const localIP = getLocalIPv4();

// ===== HTTPS 인증서 =====
const options = {
  key: fs.readFileSync(path.join(__dirname, 'key.pem')),
  cert: fs.readFileSync(path.join(__dirname, 'cert.pem')),
};

// ===== 공통 미들웨어 =====
app.use(cookieParser());
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// 정적: 기존 /public 루트 + /static 별칭 제공 (views에서 /static/* 로 참조)
app.use(express.static(path.join(__dirname, 'public')));
app.use('/static', express.static(path.join(__dirname, 'public')));

// ===== 세션 (서버1 설정 유지) =====
app.set('trust proxy', 1);
app.use(session({
  secret: 'vitamind_secret_key',
  resave: false,
  saveUninitialized: true,
  cookie: {
    httpOnly: true,
    maxAge: 1000 * 60 * 60,
    secure: true,
    sameSite: 'none',
  }
}));

// ===== 뷰 엔진 (서버2: EJS) =====
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

app.get('/admin', (req, res) => {
  const user = req.session.user || { id: 'guest', name: 'Guest', admin_yn: 'Y' };
  return res.render('admin', { user });
});

// ===== 라우터/미들웨어 로드 =====
const pageRouter = require('./routes/pageRouter'); // 서버1
const dbRouter = require('./routes/dbRouter');     // 서버1

// 서버2 라우터들
const adminRouter = require('./routes/admin');
const apiRouter = require('./routes/api');
const dashboardRouter = require('./routes/dashboard');

const { redirectAdminFromMe } = require('./middlewares/guards');

// ===== 시뮬레이터(서버1 유지) =====
try {
  const sim = require('./sim_monitor');
  const simAlertRouter = require('./routes/simAlertRouter');
  app.use('/sim', simAlertRouter);
  sim.start();
} catch (e) {
  console.warn('[sim] skip:', e && e.message);
}

// ===== 프록시(서버1 유지) =====
// 서버2 프록시 예: /s2 → 3002 (필요시 유지/정리)
app.use('/s2', createProxyMiddleware({
  target: 'http://localhost:3002',
  changeOrigin: true,
  pathRewrite: { '^/s2': '' },
  xfwd: true,
  logLevel: 'warn'
}));

// 라파 FastAPI (서버1 유지)
const RASP_BASE = process.env.RASP_BASE || 'http://192.168.219.216:8000';
app.use('/rapi', createProxyMiddleware({
  target: RASP_BASE,
  changeOrigin: true,
  pathRewrite: { '^/rapi': '' },
  followRedirects: true,
  xfwd: true,
  ws: false,
  timeout: 20000,
  proxyTimeout: 20000,
  logLevel: 'debug',
  onError(err, req, res) {
    // ...
  },
}));

// 서버2 대시보드 프록시 (필요시 유지)
app.use('/dashboard', createProxyMiddleware({
  target: 'http://localhost:3001',
  changeOrigin: true,
  pathRewrite: { '^/dashboard': '/' }
}));

// ===== 라우팅 순서 (중요) =====
// 1) 서버2: 인증/화면 먼저 => /login, /signup, /logout 등 EJS 렌더 우선
app.use('/api', apiRouter);
app.use('/admin', adminRouter);
app.use('/', redirectAdminFromMe, dashboardRouter);

// 3) 서버1: 기존 DB/API & 페이지 라우터 (뒤쪽에)
//   - pageRouter에 /login 정적 라우트가 있어서, 위에서 EJS /login이 먼저 먹도록 순서 배치
app.use('/db', dbRouter);
app.use('/', pageRouter);

// ===== 서버 실행 =====
const PORT = process.env.PORT || 3000;
https.createServer(options, app).listen(PORT, '0.0.0.0', () => {
  console.log('✅ VitaMind HTTPS server');
  console.log(`- local: https://localhost:${PORT}`);
  console.log(`- lan  : https://${localIP}:${PORT}`);
  console.log('  if browser warns, continue anyway.');
});
